<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤云两角，去天一握</title>
  <subtitle>山在地下，地山谦</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-14T09:08:21.866Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ryl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++内存存储区</title>
    <link href="http://yoursite.com/2016/04/05/C++%E5%86%85%E5%AD%98%E5%AD%98%E5%82%A8%E5%8C%BA/"/>
    <id>http://yoursite.com/2016/04/05/C++内存存储区/</id>
    <published>2016-04-05T02:17:33.000Z</published>
    <updated>2016-04-14T09:08:21.866Z</updated>
    
    <content type="html">&lt;h2 id=&quot;C-内存分配方式有五种：&quot;&gt;&lt;a href=&quot;#C-内存分配方式有五种：&quot; class=&quot;headerlink&quot; title=&quot;C++内存分配方式有五种：&quot;&gt;&lt;/a&gt;C++内存分配方式有五种：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;栈：局部变量、函数参数等&lt;ul&gt;
&lt;li&gt;可以实现函数调用；&lt;/li&gt;
&lt;li&gt;动态扩展、收缩；&lt;/li&gt;
&lt;li&gt;位于用户虚拟地址空间顶部。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;堆：new分配的内存块，delete释放。&lt;/li&gt;
&lt;li&gt;自由存储区：malloc分配，free释放。&lt;/li&gt;
&lt;li&gt;全局/静态存储区：全局变量与静态变量&lt;/li&gt;
&lt;li&gt;常量存储区：存放常量&lt;ul&gt;
&lt;li&gt;如 string s1 = “abcd”；s1是代码块中的指针，在栈中；“abcd”是常量，在常量存储区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;new和malloc的区别：&quot;&gt;&lt;a href=&quot;#new和malloc的区别：&quot; class=&quot;headerlink&quot; title=&quot;new和malloc的区别：&quot;&gt;&lt;/a&gt;new和malloc的区别：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;new可以认为是malloc加构造函数的执行；&lt;/li&gt;
&lt;li&gt;new出来的指针是直接带类型信息的，malloc返回void指针；&lt;/li&gt;
&lt;li&gt;delete会相应调用对象的析构函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;堆和栈的区别：&quot;&gt;&lt;a href=&quot;#堆和栈的区别：&quot; class=&quot;headerlink&quot; title=&quot;堆和栈的区别：&quot;&gt;&lt;/a&gt;堆和栈的区别：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;管理方式：栈是编译器自助管理；堆是程序员控制，容易内存泄漏；&lt;ul&gt;
&lt;li&gt;内存泄漏：申请指针，指针指向内存，作用域或生命周期到了，指针释 放，但内存并没有释放，也无法访问，变成“死内存”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空间大小：堆内存几乎没有限制；栈一般有一定大小（编译器有默认值，可修改）&lt;/li&gt;
&lt;li&gt;碎片问题：堆频繁new/delete会产生大量碎片（delete出来的空间几乎不可能恰好等于new的空间）；栈不会；&lt;/li&gt;
&lt;li&gt;生长方向：堆向上；栈向下。&lt;/li&gt;
&lt;li&gt;分配方式：堆动态；栈动态（alloca，但他不需人工释放）或静态（编译器完成）&lt;/li&gt;
&lt;li&gt;分配效率：栈高于堆（栈：计算机系统提供，有底层支持；堆：C/C++库提供）&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;以上内容主要来自于&lt;a href=&quot;http://www.cnblogs.com/daocaoren/archive/2011/06/29/2092957.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-内存分配方式有五种：&quot;&gt;&lt;a href=&quot;#C-内存分配方式有五种：&quot; class=&quot;headerlink&quot; title=&quot;C++内存分配方式有五种：&quot;&gt;&lt;/a&gt;C++内存分配方式有五种：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;栈：局部变量、函数参数等&lt;ul&gt;
&lt;li&gt;可
    
    </summary>
    
      <category term="内存" scheme="http://yoursite.com/categories/%E5%86%85%E5%AD%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
</feed>
